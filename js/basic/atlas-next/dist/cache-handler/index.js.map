{"version":3,"sources":["../../src/cache-handler/index.ts","../../src/cache-handler/remoteCacheHandler.ts","../../src/cache-handler/rollout.ts","../../src/api/kv.ts","../../src/api/api.ts","../../src/api/edgeCache.ts"],"sourcesContent":["import { RemoteCacheHandler } from './remoteCacheHandler'\n\nexport default RemoteCacheHandler\n","import FileSystemCache from 'next/dist/server/lib/incremental-cache/file-system-cache'\nimport type IncrementalCache from 'next/dist/server/lib/incremental-cache/file-system-cache'\nimport type {\n  CacheHandler as NextCacheHandler,\n  CacheHandlerValue as NextCacheHandlerValue\n} from 'next/dist/server/lib/incremental-cache'\nimport { isRolledOut } from './rollout'\nimport { KV } from '../api/kv'\nimport { APINotFoundError } from '../api/api'\nimport { EdgeCache } from '../api'\nimport { promises as fs } from 'fs'\nimport { normalizePagePath } from 'next/dist/shared/lib/page-path/normalize-page-path'\n\ntype FileSystemCacheContext = ConstructorParameters<typeof IncrementalCache>[0]\ntype AtlasCacheHandlerValue = Omit<NextCacheHandlerValue, 'value'> & {\n  value: any\n}\n\n/**\n * Implements the Next.js custom cache handler interface to provide a remote cache\n * on the Atlas WP Engine platform. The cache handler will fall back to reading from\n * the local disk in cases where the remote cache is unavailable\n *\n * https://nextjs.org/docs/app/building-your-application/deploying#configuring-caching\n */\nexport class RemoteCacheHandler {\n  private readonly debug: boolean\n  private readonly filesystemCache: FileSystemCache\n  private readonly keyPrefix = '.atlas'\n  private readonly kvStore?: KV\n  private readonly edgeCache?: EdgeCache\n  private readonly kvStoreRolloutPercent: number\n  private readonly isBuild: boolean\n  private readonly buildID: string\n  private nextBuildID: string | undefined\n\n  constructor(ctx: FileSystemCacheContext) {\n    // Initialise the default Next.js Filesystem Cache Handler so we can fall\n    // back to using it to read from disk if the remote cache is unavailable\n    this.filesystemCache = new FileSystemCache(ctx)\n\n    this.debug =\n      String(process.env.ATLAS_CACHE_HANDLER_DEBUG).toLowerCase() === 'true'\n\n    // Are we in the Atlas build environment?\n    this.isBuild =\n      String(process.env.ATLAS_METADATA_BUILD).toLowerCase() === 'true'\n\n    this.buildID = process.env.ATLAS_METADATA_BUILD_ID ?? ''\n\n    if (this.isKVStoreAvailable()) {\n      try {\n        this.kvStore = new KV()\n        this.debugLog('KV store enabled')\n      } catch (error) {\n        console.error(this.getErrorMessage(error))\n      }\n    }\n\n    if (this.isEdgeCacheAvailable()) {\n      try {\n        this.edgeCache = new EdgeCache()\n        this.debugLog('Edge Cache enabled')\n      } catch (error) {\n        console.error(this.getErrorMessage(error))\n      }\n    }\n\n    // Generate the rollout percent from the env var, or default to 100%\n    const defaultPercent = 100\n    const percentEnv = process.env.ATLAS_CACHE_HANDLER_ROLLOUT_PERCENT ?? ''\n    const percentEnvNum = parseInt(percentEnv, 10)\n    this.kvStoreRolloutPercent = isNaN(percentEnvNum)\n      ? defaultPercent\n      : percentEnvNum\n  }\n\n  async get(...args: Parameters<NextCacheHandler['get']>): Promise<any> {\n    const [key, ctx = {}] = args\n\n    if (!this.useKVStore(key)) {\n      this.debugLog(`GET <hint:${ctx.kindHint}> ${key} (skip remote cache)`)\n      return await this.filesystemCache.get(key, ctx)\n    }\n\n    const remoteKey = this.generateKey(key)\n    this.debugLog(`GET <hint:${ctx.kindHint}> ${key} ${remoteKey}`)\n\n    try {\n      const data: AtlasCacheHandlerValue | null =\n        await this.kvStore?.get(remoteKey)\n      return data\n    } catch (error) {\n      const is404: boolean = error instanceof APINotFoundError\n      if (!is404) {\n        console.error(this.getErrorMessage(error))\n      }\n\n      try {\n        const fsData = await this.filesystemCache.get(key, ctx)\n\n        // Value was missing from the remote cache, write the local value to remote\n        if (is404 && fsData?.value != null) {\n          this.debugLog(`priming remote cache with ${key}`)\n          await this.set(key, fsData.value, {})\n        }\n\n        return fsData\n      } catch (err) {\n        console.error(this.getErrorMessage(err))\n        return null\n      }\n    }\n  }\n\n  async set(...args: Parameters<NextCacheHandler['set']>): Promise<void> {\n    const [key, data, ctx] = args\n\n    if (!this.useKVStore(key)) {\n      this.debugLog(`SET <kind:${data?.kind}> ${key} (skip remote cache)`)\n      await this.filesystemCache.set(...args)\n      return\n    }\n\n    if (data === null) {\n      this.debugLog(`SET <kind:> ${key} (skip remote cache, data is null)`)\n      return\n    }\n\n    try {\n      if (\n        data.kind === 'PAGE' &&\n        (ctx.revalidate === undefined || ctx.revalidate === false)\n      ) {\n        const dataPath = await this.pathToDataPath(key)\n        this.debugLog(\n          `ODISR for Page Router revalidated, purging paths: ${key} and ${dataPath}`\n        )\n        await this.edgeCache?.purgeByPaths([key, dataPath])\n      }\n    } catch (error) {\n      console.error(this.getErrorMessage(error))\n    }\n\n    const cacheEntry: NextCacheHandlerValue = {\n      lastModified: Date.now(),\n      value: data\n    }\n\n    const remoteKey = this.generateKey(key)\n    this.debugLog(`SET <kind:${data.kind}> ${key} ${remoteKey}`)\n\n    try {\n      await this.kvStore?.set(remoteKey, cacheEntry)\n    } catch (error) {\n      console.error(this.getErrorMessage(error))\n    }\n\n    await this.filesystemCache.set(...args)\n  }\n\n  async revalidateTag(\n    ...args: Parameters<NextCacheHandler['revalidateTag']>\n  ): Promise<void> {\n    const [tag] = args\n    this.debugLog(`Revalidate Tag: ${tag.toString()}`)\n    await this.filesystemCache.revalidateTag(...args)\n  }\n\n  private generateKey(key: string): string {\n    key = key.replace(/^\\/+/g, '') // strip leading slash\n    return `${this.keyPrefix}/${this.buildID}/next/${key}`\n  }\n\n  private getErrorMessage(error: unknown): string {\n    if (error instanceof Error) return error.message\n    return String(error)\n  }\n\n  private debugLog(msg: string): void {\n    if (this.debug) {\n      console.debug('DEBUG: Remote Cache Handler: ' + msg)\n    }\n  }\n\n  /**\n   * Is the KV Store available for use?\n   */\n  private isKVStoreAvailable(): boolean {\n    if (this.isBuild) {\n      return false\n    }\n\n    if (!KV.isAvailable()) {\n      return false\n    }\n\n    if (this.buildID === '') {\n      console.log(\n        'Warning: ATLAS_METADATA_BUILD_ID is missing, remote cache disabled'\n      )\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Should the KV Store be used for this key?\n   */\n  private useKVStore(key: string): boolean {\n    if (this.kvStore === undefined) {\n      return false\n    }\n\n    if (this.kvStoreRolloutPercent >= 100) {\n      return true\n    }\n\n    if (this.kvStoreRolloutPercent <= 0) {\n      return false\n    }\n\n    // Check if KV store is rolled out for this particular key\n    return isRolledOut(key, this.kvStoreRolloutPercent)\n  }\n\n  /**\n   * Is the Edge Cache available for use?\n   */\n  private isEdgeCacheAvailable(): boolean {\n    if (this.isBuild) {\n      return false\n    }\n\n    if (!EdgeCache.isAvailable()) {\n      return false\n    }\n\n    return true\n  }\n\n  private async pathToDataPath(path: string): Promise<string> {\n    if (this.nextBuildID === undefined) {\n      const buildIDPath = '.next/BUILD_ID'\n      try {\n        await fs.access(buildIDPath)\n        this.nextBuildID = (await fs.readFile(buildIDPath, 'utf-8')).trim()\n      } catch (error) {\n        console.error('BUILD_ID file not found, cannot purge data path')\n        throw error\n      }\n    }\n\n    const pagePath = normalizePagePath(path)\n    const dataRoute = `/_next/data/${this.nextBuildID}${pagePath}.json`\n\n    return dataRoute\n  }\n}\n","import crypto from 'crypto'\n\n/**\n * Check if an Id is rolled out or not\n */\nexport function isRolledOut(id: string, rolloutPercent: number): boolean {\n  const hash = crypto.createHash('sha256')\n  hash.update(id)\n  const buf = hash.digest()\n\n  // Take the first four bytes of the hash and convert them to an int\n  const hashInt = buf.readUIntBE(0, 4)\n\n  // Get the remainder of the int value from 100 to downsample it to a percent\n  // then check if it's less than the current rolloutPercent\n  return rolloutPercent > (hashInt % 100) + 1\n}\n","import fetch from 'node-fetch'\nimport { API } from './api'\n\nexport class KV extends API {\n  private readonly token: string\n  private readonly url: string\n\n  static isAvailable(): boolean {\n    const urlExists = (process.env.ATLAS_KV_STORE_URL ?? '') !== ''\n    const tokenExists = (process.env.ATLAS_KV_STORE_TOKEN ?? '') !== ''\n    const atlasRuntime =\n      String(process.env.ATLAS_METADATA).toLowerCase() === 'true'\n    return urlExists && tokenExists && atlasRuntime\n  }\n\n  constructor() {\n    super()\n    if (process.env.ATLAS_METADATA !== 'true') {\n      throw new Error('KV: The app is not running on the Atlas Platform')\n    }\n\n    this.url = process.env.ATLAS_KV_STORE_URL ?? ''\n    if (this.url === '') {\n      throw new Error('KV: ATLAS_KV_STORE_URL env var is missing')\n    }\n\n    this.token = process.env.ATLAS_KV_STORE_TOKEN ?? ''\n    if (this.token === '') {\n      throw new Error('KV: ATLAS_KV_STORE_TOKEN env var is missing')\n    }\n  }\n\n  async get(key: string): Promise<any> {\n    const response = await fetch(`${this.url}/${key}`, {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n\n    return await response.json()\n  }\n\n  async set(key: string, data: any): Promise<void> {\n    if (data === null) {\n      return\n    }\n\n    const response = await fetch(`${this.url}/${key}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n  }\n}\n","import { type Response } from 'node-fetch'\n\nexport class APIError extends Error {\n  public response\n\n  constructor(response: Response, key: string) {\n    super(\n      `HTTP Error Response: ${response.status} ${response.statusText} for key(s): ${key}`\n    )\n    this.response = response\n  }\n}\n\nexport class APINotFoundError extends Error {}\n\nexport abstract class API {\n  // The atlas-next package version will be injected from package.json\n  // at build time by esbuild-plugin-version-injector\n  protected readonly version: string = '1.3.0-beta'\n\n  constructor() {\n    if (process.env.ATLAS_METADATA !== 'true') {\n      throw new Error('API: The app is not running on the Atlas Platform')\n    }\n  }\n\n  /**\n   * Convert response status codes to API errors and throw them\n   * @param response\n   * @param key\n   */\n  protected throwResponseErrors(response: Response, key: string): void {\n    if (response.status === 404) {\n      throw new APINotFoundError()\n    }\n    if (response.status < 200 || response.status >= 300) {\n      throw new APIError(response, key)\n    }\n  }\n}\n","import fetch from 'node-fetch'\nimport { API } from './api'\n\nexport class EdgeCache extends API {\n  private readonly url: string\n  private readonly token: string\n  private readonly envuuid: string\n\n  static isAvailable(): boolean {\n    const urlExists = (process.env.ATLAS_APPS_API_URL_ADDRESS ?? '') !== ''\n    const tokenExists = (process.env.ATLAS_APPS_API_TOKEN ?? '') !== ''\n    const atlasRuntime =\n      String(process.env.ATLAS_METADATA).toLowerCase() === 'true'\n    return urlExists && tokenExists && atlasRuntime\n  }\n\n  constructor() {\n    super()\n\n    this.url = process.env.ATLAS_APPS_API_URL_ADDRESS ?? ''\n    if (this.url === '') {\n      throw new Error(\n        'EdgeCache: ATLAS_APPS_API_URL_ADDRESS env var is missing'\n      )\n    }\n\n    this.token = process.env.ATLAS_APPS_API_TOKEN ?? ''\n    if (this.token === '') {\n      throw new Error('EdgeCache: ATLAS_APPS_API_TOKEN env var is missing')\n    }\n\n    this.envuuid = process.env.ATLAS_METADATA_ENV_ID ?? ''\n    if (this.envuuid === '') {\n      throw new Error('EdgeCache: ATLAS_METADATA_ENV_ID env var is missing')\n    }\n  }\n\n  /**\n   * Purge the edge cache by tags\n   * @param string[]\n   */\n  async purgeByTags(tags: string[]): Promise<any> {\n    const response = await fetch(\n      `${this.url}/envs/${this.envuuid}/edge/cache/tags:purge`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.token}`,\n          'User-Agent': `AtlasNext/${this.version}`\n        },\n        body: JSON.stringify({ tags })\n      }\n    )\n\n    this.throwResponseErrors(response, tags.join(','))\n  }\n\n  /**\n   * Purge the edge cache by paths\n   * @param string[]\n   */\n  async purgeByPaths(paths: string[]): Promise<any> {\n    await this.purgeByTags(paths)\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,+BAA4B;;;ACA5B,oBAAmB;AAKZ,SAAS,YAAY,IAAY,gBAAiC;AACvE,QAAM,OAAO,cAAAA,QAAO,WAAW,QAAQ;AACvC,OAAK,OAAO,EAAE;AACd,QAAM,MAAM,KAAK,OAAO;AAGxB,QAAM,UAAU,IAAI,WAAW,GAAG,CAAC;AAInC,SAAO,iBAAkB,UAAU,MAAO;AAC5C;;;AChBA,wBAAkB;;;ACEX,IAAM,WAAN,cAAuB,MAAM;AAAA,EAC3B;AAAA,EAEP,YAAY,UAAoB,KAAa;AAC3C;AAAA,MACE,wBAAwB,SAAS,MAAM,IAAI,SAAS,UAAU,gBAAgB,GAAG;AAAA,IACnF;AACA,SAAK,WAAW;AAAA,EAClB;AACF;AAEO,IAAM,mBAAN,cAA+B,MAAM;AAAC;AAEtC,IAAe,MAAf,MAAmB;AAAA;AAAA;AAAA,EAGL,UAAkB;AAAA,EAErC,cAAc;AACZ,QAAI,QAAQ,IAAI,mBAAmB,QAAQ;AACzC,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,oBAAoB,UAAoB,KAAmB;AACnE,QAAI,SAAS,WAAW,KAAK;AAC3B,YAAM,IAAI,iBAAiB;AAAA,IAC7B;AACA,QAAI,SAAS,SAAS,OAAO,SAAS,UAAU,KAAK;AACnD,YAAM,IAAI,SAAS,UAAU,GAAG;AAAA,IAClC;AAAA,EACF;AACF;;;ADpCO,IAAM,KAAN,cAAiB,IAAI;AAAA,EACT;AAAA,EACA;AAAA,EAEjB,OAAO,cAAuB;AAC5B,UAAM,aAAa,QAAQ,IAAI,sBAAsB,QAAQ;AAC7D,UAAM,eAAe,QAAQ,IAAI,wBAAwB,QAAQ;AACjE,UAAM,eACJ,OAAO,QAAQ,IAAI,cAAc,EAAE,YAAY,MAAM;AACvD,WAAO,aAAa,eAAe;AAAA,EACrC;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,QAAI,QAAQ,IAAI,mBAAmB,QAAQ;AACzC,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,SAAK,MAAM,QAAQ,IAAI,sBAAsB;AAC7C,QAAI,KAAK,QAAQ,IAAI;AACnB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAEA,SAAK,QAAQ,QAAQ,IAAI,wBAAwB;AACjD,QAAI,KAAK,UAAU,IAAI;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,KAA2B;AACnC,UAAM,WAAW,UAAM,kBAAAC,SAAM,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,MACjD,SAAS;AAAA,QACP,eAAe,UAAU,KAAK,KAAK;AAAA,QACnC,cAAc,aAAa,KAAK,OAAO;AAAA,MACzC;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,UAAU,GAAG;AAEtC,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B;AAAA,EAEA,MAAM,IAAI,KAAa,MAA0B;AAC/C,QAAI,SAAS,MAAM;AACjB;AAAA,IACF;AAEA,UAAM,WAAW,UAAM,kBAAAA,SAAM,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,MACjD,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,IAAI;AAAA,MACzB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,KAAK,KAAK;AAAA,QACnC,cAAc,aAAa,KAAK,OAAO;AAAA,MACzC;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,UAAU,GAAG;AAAA,EACxC;AACF;;;AE9DA,IAAAC,qBAAkB;AAGX,IAAM,YAAN,cAAwB,IAAI;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,OAAO,cAAuB;AAC5B,UAAM,aAAa,QAAQ,IAAI,8BAA8B,QAAQ;AACrE,UAAM,eAAe,QAAQ,IAAI,wBAAwB,QAAQ;AACjE,UAAM,eACJ,OAAO,QAAQ,IAAI,cAAc,EAAE,YAAY,MAAM;AACvD,WAAO,aAAa,eAAe;AAAA,EACrC;AAAA,EAEA,cAAc;AACZ,UAAM;AAEN,SAAK,MAAM,QAAQ,IAAI,8BAA8B;AACrD,QAAI,KAAK,QAAQ,IAAI;AACnB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,QAAQ,QAAQ,IAAI,wBAAwB;AACjD,QAAI,KAAK,UAAU,IAAI;AACrB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,SAAK,UAAU,QAAQ,IAAI,yBAAyB;AACpD,QAAI,KAAK,YAAY,IAAI;AACvB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,MAA8B;AAC9C,UAAM,WAAW,UAAM,mBAAAC;AAAA,MACrB,GAAG,KAAK,GAAG,SAAS,KAAK,OAAO;AAAA,MAChC;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,eAAe,UAAU,KAAK,KAAK;AAAA,UACnC,cAAc,aAAa,KAAK,OAAO;AAAA,QACzC;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,KAAK,CAAC;AAAA,MAC/B;AAAA,IACF;AAEA,SAAK,oBAAoB,UAAU,KAAK,KAAK,GAAG,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,aAAa,OAA+B;AAChD,UAAM,KAAK,YAAY,KAAK;AAAA,EAC9B;AACF;;;AJvDA,gBAA+B;AAC/B,iCAAkC;AAc3B,IAAM,qBAAN,MAAyB;AAAA,EACb;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACT;AAAA,EAER,YAAY,KAA6B;AAGvC,SAAK,kBAAkB,IAAI,yBAAAC,QAAgB,GAAG;AAE9C,SAAK,QACH,OAAO,QAAQ,IAAI,yBAAyB,EAAE,YAAY,MAAM;AAGlE,SAAK,UACH,OAAO,QAAQ,IAAI,oBAAoB,EAAE,YAAY,MAAM;AAE7D,SAAK,UAAU,QAAQ,IAAI,2BAA2B;AAEtD,QAAI,KAAK,mBAAmB,GAAG;AAC7B,UAAI;AACF,aAAK,UAAU,IAAI,GAAG;AACtB,aAAK,SAAS,kBAAkB;AAAA,MAClC,SAAS,OAAO;AACd,gBAAQ,MAAM,KAAK,gBAAgB,KAAK,CAAC;AAAA,MAC3C;AAAA,IACF;AAEA,QAAI,KAAK,qBAAqB,GAAG;AAC/B,UAAI;AACF,aAAK,YAAY,IAAI,UAAU;AAC/B,aAAK,SAAS,oBAAoB;AAAA,MACpC,SAAS,OAAO;AACd,gBAAQ,MAAM,KAAK,gBAAgB,KAAK,CAAC;AAAA,MAC3C;AAAA,IACF;AAGA,UAAM,iBAAiB;AACvB,UAAM,aAAa,QAAQ,IAAI,uCAAuC;AACtE,UAAM,gBAAgB,SAAS,YAAY,EAAE;AAC7C,SAAK,wBAAwB,MAAM,aAAa,IAC5C,iBACA;AAAA,EACN;AAAA,EAEA,MAAM,OAAO,MAAyD;AACpE,UAAM,CAAC,KAAK,MAAM,CAAC,CAAC,IAAI;AAExB,QAAI,CAAC,KAAK,WAAW,GAAG,GAAG;AACzB,WAAK,SAAS,aAAa,IAAI,QAAQ,KAAK,GAAG,sBAAsB;AACrE,aAAO,MAAM,KAAK,gBAAgB,IAAI,KAAK,GAAG;AAAA,IAChD;AAEA,UAAM,YAAY,KAAK,YAAY,GAAG;AACtC,SAAK,SAAS,aAAa,IAAI,QAAQ,KAAK,GAAG,IAAI,SAAS,EAAE;AAE9D,QAAI;AACF,YAAM,OACJ,MAAM,KAAK,SAAS,IAAI,SAAS;AACnC,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,QAAiB,iBAAiB;AACxC,UAAI,CAAC,OAAO;AACV,gBAAQ,MAAM,KAAK,gBAAgB,KAAK,CAAC;AAAA,MAC3C;AAEA,UAAI;AACF,cAAM,SAAS,MAAM,KAAK,gBAAgB,IAAI,KAAK,GAAG;AAGtD,YAAI,SAAS,QAAQ,SAAS,MAAM;AAClC,eAAK,SAAS,6BAA6B,GAAG,EAAE;AAChD,gBAAM,KAAK,IAAI,KAAK,OAAO,OAAO,CAAC,CAAC;AAAA,QACtC;AAEA,eAAO;AAAA,MACT,SAAS,KAAK;AACZ,gBAAQ,MAAM,KAAK,gBAAgB,GAAG,CAAC;AACvC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,OAAO,MAA0D;AACrE,UAAM,CAAC,KAAK,MAAM,GAAG,IAAI;AAEzB,QAAI,CAAC,KAAK,WAAW,GAAG,GAAG;AACzB,WAAK,SAAS,aAAa,MAAM,IAAI,KAAK,GAAG,sBAAsB;AACnE,YAAM,KAAK,gBAAgB,IAAI,GAAG,IAAI;AACtC;AAAA,IACF;AAEA,QAAI,SAAS,MAAM;AACjB,WAAK,SAAS,eAAe,GAAG,oCAAoC;AACpE;AAAA,IACF;AAEA,QAAI;AACF,UACE,KAAK,SAAS,WACb,IAAI,eAAe,UAAa,IAAI,eAAe,QACpD;AACA,cAAM,WAAW,MAAM,KAAK,eAAe,GAAG;AAC9C,aAAK;AAAA,UACH,qDAAqD,GAAG,QAAQ,QAAQ;AAAA,QAC1E;AACA,cAAM,KAAK,WAAW,aAAa,CAAC,KAAK,QAAQ,CAAC;AAAA,MACpD;AAAA,IACF,SAAS,OAAO;AACd,cAAQ,MAAM,KAAK,gBAAgB,KAAK,CAAC;AAAA,IAC3C;AAEA,UAAM,aAAoC;AAAA,MACxC,cAAc,KAAK,IAAI;AAAA,MACvB,OAAO;AAAA,IACT;AAEA,UAAM,YAAY,KAAK,YAAY,GAAG;AACtC,SAAK,SAAS,aAAa,KAAK,IAAI,KAAK,GAAG,IAAI,SAAS,EAAE;AAE3D,QAAI;AACF,YAAM,KAAK,SAAS,IAAI,WAAW,UAAU;AAAA,IAC/C,SAAS,OAAO;AACd,cAAQ,MAAM,KAAK,gBAAgB,KAAK,CAAC;AAAA,IAC3C;AAEA,UAAM,KAAK,gBAAgB,IAAI,GAAG,IAAI;AAAA,EACxC;AAAA,EAEA,MAAM,iBACD,MACY;AACf,UAAM,CAAC,GAAG,IAAI;AACd,SAAK,SAAS,mBAAmB,IAAI,SAAS,CAAC,EAAE;AACjD,UAAM,KAAK,gBAAgB,cAAc,GAAG,IAAI;AAAA,EAClD;AAAA,EAEQ,YAAY,KAAqB;AACvC,UAAM,IAAI,QAAQ,SAAS,EAAE;AAC7B,WAAO,GAAG,KAAK,SAAS,IAAI,KAAK,OAAO,SAAS,GAAG;AAAA,EACtD;AAAA,EAEQ,gBAAgB,OAAwB;AAC9C,QAAI,iBAAiB,MAAO,QAAO,MAAM;AACzC,WAAO,OAAO,KAAK;AAAA,EACrB;AAAA,EAEQ,SAAS,KAAmB;AAClC,QAAI,KAAK,OAAO;AACd,cAAQ,MAAM,kCAAkC,GAAG;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,qBAA8B;AACpC,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,GAAG,YAAY,GAAG;AACrB,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,YAAY,IAAI;AACvB,cAAQ;AAAA,QACN;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKQ,WAAW,KAAsB;AACvC,QAAI,KAAK,YAAY,QAAW;AAC9B,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,yBAAyB,KAAK;AACrC,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,yBAAyB,GAAG;AACnC,aAAO;AAAA,IACT;AAGA,WAAO,YAAY,KAAK,KAAK,qBAAqB;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA,EAKQ,uBAAgC;AACtC,QAAI,KAAK,SAAS;AAChB,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,UAAU,YAAY,GAAG;AAC5B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,eAAe,MAA+B;AAC1D,QAAI,KAAK,gBAAgB,QAAW;AAClC,YAAM,cAAc;AACpB,UAAI;AACF,cAAM,UAAAC,SAAG,OAAO,WAAW;AAC3B,aAAK,eAAe,MAAM,UAAAA,SAAG,SAAS,aAAa,OAAO,GAAG,KAAK;AAAA,MACpE,SAAS,OAAO;AACd,gBAAQ,MAAM,iDAAiD;AAC/D,cAAM;AAAA,MACR;AAAA,IACF;AAEA,UAAM,eAAW,8CAAkB,IAAI;AACvC,UAAM,YAAY,eAAe,KAAK,WAAW,GAAG,QAAQ;AAE5D,WAAO;AAAA,EACT;AACF;;;ADhQA,IAAO,wBAAQ;","names":["crypto","fetch","import_node_fetch","fetch","FileSystemCache","fs"]}