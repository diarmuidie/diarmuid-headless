{"version":3,"sources":["../../src/api/edgeCache.ts","../../src/api/api.ts","../../src/api/kv.ts"],"sourcesContent":["import fetch from 'node-fetch'\nimport { API } from './api'\n\nexport class EdgeCache extends API {\n  private readonly url: string\n  private readonly token: string\n  private readonly envuuid: string\n\n  static isAvailable(): boolean {\n    const urlExists = (process.env.ATLAS_APPS_API_URL_ADDRESS ?? '') !== ''\n    const tokenExists = (process.env.ATLAS_APPS_API_TOKEN ?? '') !== ''\n    const atlasRuntime =\n      String(process.env.ATLAS_METADATA).toLowerCase() === 'true'\n    return urlExists && tokenExists && atlasRuntime\n  }\n\n  constructor() {\n    super()\n\n    this.url = process.env.ATLAS_APPS_API_URL_ADDRESS ?? ''\n    if (this.url === '') {\n      throw new Error(\n        'EdgeCache: ATLAS_APPS_API_URL_ADDRESS env var is missing'\n      )\n    }\n\n    this.token = process.env.ATLAS_APPS_API_TOKEN ?? ''\n    if (this.token === '') {\n      throw new Error('EdgeCache: ATLAS_APPS_API_TOKEN env var is missing')\n    }\n\n    this.envuuid = process.env.ATLAS_METADATA_ENV_ID ?? ''\n    if (this.envuuid === '') {\n      throw new Error('EdgeCache: ATLAS_METADATA_ENV_ID env var is missing')\n    }\n  }\n\n  /**\n   * Purge the edge cache by tags\n   * @param string[]\n   */\n  async purgeByTags(tags: string[]): Promise<any> {\n    const response = await fetch(\n      `${this.url}/envs/${this.envuuid}/edge/cache/tags:purge`,\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${this.token}`,\n          'User-Agent': `AtlasNext/${this.version}`\n        },\n        body: JSON.stringify({ tags })\n      }\n    )\n\n    this.throwResponseErrors(response, tags.join(','))\n  }\n\n  /**\n   * Purge the edge cache by paths\n   * @param string[]\n   */\n  async purgeByPaths(paths: string[]): Promise<any> {\n    await this.purgeByTags(paths)\n  }\n}\n","import { type Response } from 'node-fetch'\n\nexport class APIError extends Error {\n  public response\n\n  constructor(response: Response, key: string) {\n    super(\n      `HTTP Error Response: ${response.status} ${response.statusText} for key(s): ${key}`\n    )\n    this.response = response\n  }\n}\n\nexport class APINotFoundError extends Error {}\n\nexport abstract class API {\n  // The atlas-next package version will be injected from package.json\n  // at build time by esbuild-plugin-version-injector\n  protected readonly version: string = '1.3.0-beta'\n\n  constructor() {\n    if (process.env.ATLAS_METADATA !== 'true') {\n      throw new Error('API: The app is not running on the Atlas Platform')\n    }\n  }\n\n  /**\n   * Convert response status codes to API errors and throw them\n   * @param response\n   * @param key\n   */\n  protected throwResponseErrors(response: Response, key: string): void {\n    if (response.status === 404) {\n      throw new APINotFoundError()\n    }\n    if (response.status < 200 || response.status >= 300) {\n      throw new APIError(response, key)\n    }\n  }\n}\n","import fetch from 'node-fetch'\nimport { API } from './api'\n\nexport class KV extends API {\n  private readonly token: string\n  private readonly url: string\n\n  static isAvailable(): boolean {\n    const urlExists = (process.env.ATLAS_KV_STORE_URL ?? '') !== ''\n    const tokenExists = (process.env.ATLAS_KV_STORE_TOKEN ?? '') !== ''\n    const atlasRuntime =\n      String(process.env.ATLAS_METADATA).toLowerCase() === 'true'\n    return urlExists && tokenExists && atlasRuntime\n  }\n\n  constructor() {\n    super()\n    if (process.env.ATLAS_METADATA !== 'true') {\n      throw new Error('KV: The app is not running on the Atlas Platform')\n    }\n\n    this.url = process.env.ATLAS_KV_STORE_URL ?? ''\n    if (this.url === '') {\n      throw new Error('KV: ATLAS_KV_STORE_URL env var is missing')\n    }\n\n    this.token = process.env.ATLAS_KV_STORE_TOKEN ?? ''\n    if (this.token === '') {\n      throw new Error('KV: ATLAS_KV_STORE_TOKEN env var is missing')\n    }\n  }\n\n  async get(key: string): Promise<any> {\n    const response = await fetch(`${this.url}/${key}`, {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n\n    return await response.json()\n  }\n\n  async set(key: string, data: any): Promise<void> {\n    if (data === null) {\n      return\n    }\n\n    const response = await fetch(`${this.url}/${key}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n  }\n}\n"],"mappings":";AAAA,OAAO,WAAW;;;ACEX,IAAM,WAAN,cAAuB,MAAM;AAAA,EAC3B;AAAA,EAEP,YAAY,UAAoB,KAAa;AAC3C;AAAA,MACE,wBAAwB,SAAS,MAAM,IAAI,SAAS,UAAU,gBAAgB,GAAG;AAAA,IACnF;AACA,SAAK,WAAW;AAAA,EAClB;AACF;AAEO,IAAM,mBAAN,cAA+B,MAAM;AAAC;AAEtC,IAAe,MAAf,MAAmB;AAAA;AAAA;AAAA,EAGL,UAAkB;AAAA,EAErC,cAAc;AACZ,QAAI,QAAQ,IAAI,mBAAmB,QAAQ;AACzC,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,oBAAoB,UAAoB,KAAmB;AACnE,QAAI,SAAS,WAAW,KAAK;AAC3B,YAAM,IAAI,iBAAiB;AAAA,IAC7B;AACA,QAAI,SAAS,SAAS,OAAO,SAAS,UAAU,KAAK;AACnD,YAAM,IAAI,SAAS,UAAU,GAAG;AAAA,IAClC;AAAA,EACF;AACF;;;ADpCO,IAAM,YAAN,cAAwB,IAAI;AAAA,EAChB;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,OAAO,cAAuB;AAC5B,UAAM,aAAa,QAAQ,IAAI,8BAA8B,QAAQ;AACrE,UAAM,eAAe,QAAQ,IAAI,wBAAwB,QAAQ;AACjE,UAAM,eACJ,OAAO,QAAQ,IAAI,cAAc,EAAE,YAAY,MAAM;AACvD,WAAO,aAAa,eAAe;AAAA,EACrC;AAAA,EAEA,cAAc;AACZ,UAAM;AAEN,SAAK,MAAM,QAAQ,IAAI,8BAA8B;AACrD,QAAI,KAAK,QAAQ,IAAI;AACnB,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AAEA,SAAK,QAAQ,QAAQ,IAAI,wBAAwB;AACjD,QAAI,KAAK,UAAU,IAAI;AACrB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACtE;AAEA,SAAK,UAAU,QAAQ,IAAI,yBAAyB;AACpD,QAAI,KAAK,YAAY,IAAI;AACvB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,MAA8B;AAC9C,UAAM,WAAW,MAAM;AAAA,MACrB,GAAG,KAAK,GAAG,SAAS,KAAK,OAAO;AAAA,MAChC;AAAA,QACE,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,eAAe,UAAU,KAAK,KAAK;AAAA,UACnC,cAAc,aAAa,KAAK,OAAO;AAAA,QACzC;AAAA,QACA,MAAM,KAAK,UAAU,EAAE,KAAK,CAAC;AAAA,MAC/B;AAAA,IACF;AAEA,SAAK,oBAAoB,UAAU,KAAK,KAAK,GAAG,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,aAAa,OAA+B;AAChD,UAAM,KAAK,YAAY,KAAK;AAAA,EAC9B;AACF;;;AEjEA,OAAOA,YAAW;AAGX,IAAM,KAAN,cAAiB,IAAI;AAAA,EACT;AAAA,EACA;AAAA,EAEjB,OAAO,cAAuB;AAC5B,UAAM,aAAa,QAAQ,IAAI,sBAAsB,QAAQ;AAC7D,UAAM,eAAe,QAAQ,IAAI,wBAAwB,QAAQ;AACjE,UAAM,eACJ,OAAO,QAAQ,IAAI,cAAc,EAAE,YAAY,MAAM;AACvD,WAAO,aAAa,eAAe;AAAA,EACrC;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,QAAI,QAAQ,IAAI,mBAAmB,QAAQ;AACzC,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,SAAK,MAAM,QAAQ,IAAI,sBAAsB;AAC7C,QAAI,KAAK,QAAQ,IAAI;AACnB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAEA,SAAK,QAAQ,QAAQ,IAAI,wBAAwB;AACjD,QAAI,KAAK,UAAU,IAAI;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,KAA2B;AACnC,UAAM,WAAW,MAAMC,OAAM,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,MACjD,SAAS;AAAA,QACP,eAAe,UAAU,KAAK,KAAK;AAAA,QACnC,cAAc,aAAa,KAAK,OAAO;AAAA,MACzC;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,UAAU,GAAG;AAEtC,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B;AAAA,EAEA,MAAM,IAAI,KAAa,MAA0B;AAC/C,QAAI,SAAS,MAAM;AACjB;AAAA,IACF;AAEA,UAAM,WAAW,MAAMA,OAAM,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,MACjD,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,IAAI;AAAA,MACzB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,KAAK,KAAK;AAAA,QACnC,cAAc,aAAa,KAAK,OAAO;AAAA,MACzC;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,UAAU,GAAG;AAAA,EACxC;AACF;","names":["fetch","fetch"]}