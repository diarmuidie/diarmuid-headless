{"version":3,"sources":["../src/config.ts","../src/api/kv.ts","../src/api/api.ts"],"sourcesContent":["import { type NextConfig } from 'next'\nimport path from 'path'\nimport { KV } from './api/kv'\n\nexport interface AtlasConfig extends Record<string, any> {\n  /**\n   * If set to `false`, the Atlas remote cache handler will not be added (defaults to true)\n   */\n  remoteCacheHandler?: boolean\n}\n\n/**\n * Add Atlas options to the config to be exported from the user's Next.js config file\n * @param nextConfig\n * @param atlasConfig\n * @returns The modified config\n */\nexport function withAtlasConfig(\n  nextConfig: NextConfig,\n  atlasConfig?: AtlasConfig\n): NextConfig {\n  if (atlasConfig?.remoteCacheHandler === false) {\n    return nextConfig\n  }\n\n  /* eslint-disable @typescript-eslint/no-var-requires */\n  // Get the next.js version\n  const nextModulePath = path.parse(require.resolve('next'))\n  const nextPackage = require(\n    path.join(nextModulePath.dir, '../../package.json')\n  )\n  /* eslint-enable @typescript-eslint/no-var-requires */\n\n  return setCacheHandler(\n    nextConfig,\n    nextPackage.version,\n    // TODO: look closer how this can be stubbed to enable testing\n    // of the withAtlasConfig function\n    require.resolve('@wpengine/atlas-next/cache-handler')\n  )\n}\n\nexport function setCacheHandler(\n  nextConfig: NextConfig,\n  nextVersion: string,\n  cacheHandlerPath: string\n): NextConfig {\n  // If next.js version is less than 12.2.0\n  if (compare(nextVersion, '12.2.0') === -1) {\n    throw new Error(\n      'Next.js version ' +\n        nextVersion +\n        ' is not supported by @wpengine/atlas-next'\n    )\n  }\n\n  // If Next.js version is affected by this issue https://github.com/vercel/next.js/issues/54453\n  if (\n    compare(nextVersion, '13.4.12') === 1 &&\n    compare(nextVersion, '13.5.1') === -1\n  ) {\n    throw new Error(\n      'Next.js version ' +\n        nextVersion +\n        ' is not supported by @wpengine/atlas-next, please use version >= 13.5.1.'\n    )\n  }\n\n  // If next.js version is less than 14.1.0 (and greater than or equal to 12.2.0)\n  if (compare(nextVersion, '14.1.0') === -1) {\n    nextConfig.experimental = nextConfig.experimental ?? {}\n    if (nextConfig.experimental.incrementalCacheHandlerPath !== undefined) {\n      console.warn('Overwriting existing incrementalCacheHandlerPath config')\n    }\n    nextConfig.experimental.incrementalCacheHandlerPath = cacheHandlerPath\n    if (nextConfig.experimental.isrMemoryCacheSize !== undefined) {\n      console.warn('Overwriting existing isrMemoryCacheSize config')\n    }\n    nextConfig.experimental.isrMemoryCacheSize = 0\n  } else {\n    // If next.js version is 14.1.0 or higher\n    if (nextConfig.cacheHandler !== undefined) {\n      console.warn('Overwriting existing cacheHandler config')\n    }\n    nextConfig.cacheHandler = cacheHandlerPath\n    if (nextConfig.cacheMaxMemorySize !== undefined) {\n      console.warn('Overwriting existing cacheMaxMemorySize config')\n    }\n    nextConfig.cacheMaxMemorySize = 0\n  }\n\n  printEnabledNotice()\n\n  return nextConfig\n}\n\nfunction printEnabledNotice(): void {\n  if (process.env.ATLAS_CACHE_HANDLER_MESSAGE === undefined) {\n    let message = 'Atlas remote cache handler enabled'\n    if (process.env.ATLAS_METADATA_BUILD === undefined && !KV.isAvailable()) {\n      message = message + ' (local storage mode)'\n    }\n    console.log(message)\n\n    // Only print the message once\n    process.env.ATLAS_CACHE_HANDLER_MESSAGE = 'true'\n  }\n}\n\n// The function is created to not add an external dependency to the package.\nexport function compare(v1: string, v2: string): number {\n  // Remove any pre-release tags\n  const version1 = v1.split('-')[0]\n  const version2 = v2.split('-')[0]\n\n  validateVersion(version1)\n  validateVersion(version2)\n\n  const v1Parts = version1.split('.')\n  const v1Major = v1Parts[0]\n  const v1Minor = v1Parts[1]\n  const v1Patch = v1Parts[2]\n  const v2Parts = version2.split('.')\n  const v2Major = v2Parts[0]\n  const v2Minor = v2Parts[1]\n  const v2Patch = v2Parts[2]\n\n  const v1PatchLesserOrEqual = v1Patch < v2Patch ? -1 : 0\n  const comparePatchVersions = v1Patch > v2Patch ? 1 : v1PatchLesserOrEqual\n  const v1MinorLesserOrEqual = v1Minor < v2Minor ? -1 : comparePatchVersions\n  const compareMinorVersions = v1Minor > v2Minor ? 1 : v1MinorLesserOrEqual\n  const v1MajorLesserOrEqual = v1Major < v2Major ? -1 : compareMinorVersions\n\n  return v1Major > v2Major ? 1 : v1MajorLesserOrEqual\n}\n\nexport function validateVersion(version: string): void {\n  const invalidVersionError = 'Unable to validate Next.js version: ' + version\n  if (version.length === 0) {\n    throw new Error(invalidVersionError)\n  }\n  const parts = version.split('.')\n  if (parts.length < 3) {\n    throw new Error(invalidVersionError)\n  }\n  const major = parts[0]\n  if (major.length === 0 || isNaN(Number(major))) {\n    throw new Error(invalidVersionError)\n  }\n  const minor = parts[1]\n  if (minor.length === 0 || isNaN(Number(minor))) {\n    throw new Error(invalidVersionError)\n  }\n}\n","import fetch from 'node-fetch'\nimport { API } from './api'\n\nexport class KV extends API {\n  private readonly token: string\n  private readonly url: string\n\n  static isAvailable(): boolean {\n    const urlExists = (process.env.ATLAS_KV_STORE_URL ?? '') !== ''\n    const tokenExists = (process.env.ATLAS_KV_STORE_TOKEN ?? '') !== ''\n    const atlasRuntime =\n      String(process.env.ATLAS_METADATA).toLowerCase() === 'true'\n    return urlExists && tokenExists && atlasRuntime\n  }\n\n  constructor() {\n    super()\n    if (process.env.ATLAS_METADATA !== 'true') {\n      throw new Error('KV: The app is not running on the Atlas Platform')\n    }\n\n    this.url = process.env.ATLAS_KV_STORE_URL ?? ''\n    if (this.url === '') {\n      throw new Error('KV: ATLAS_KV_STORE_URL env var is missing')\n    }\n\n    this.token = process.env.ATLAS_KV_STORE_TOKEN ?? ''\n    if (this.token === '') {\n      throw new Error('KV: ATLAS_KV_STORE_TOKEN env var is missing')\n    }\n  }\n\n  async get(key: string): Promise<any> {\n    const response = await fetch(`${this.url}/${key}`, {\n      headers: {\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n\n    return await response.json()\n  }\n\n  async set(key: string, data: any): Promise<void> {\n    if (data === null) {\n      return\n    }\n\n    const response = await fetch(`${this.url}/${key}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${this.token}`,\n        'User-Agent': `AtlasNext/${this.version}`\n      }\n    })\n\n    this.throwResponseErrors(response, key)\n  }\n}\n","import { type Response } from 'node-fetch'\n\nexport class APIError extends Error {\n  public response\n\n  constructor(response: Response, key: string) {\n    super(\n      `HTTP Error Response: ${response.status} ${response.statusText} for key(s): ${key}`\n    )\n    this.response = response\n  }\n}\n\nexport class APINotFoundError extends Error {}\n\nexport abstract class API {\n  // The atlas-next package version will be injected from package.json\n  // at build time by esbuild-plugin-version-injector\n  protected readonly version: string = '1.3.0-beta'\n\n  constructor() {\n    if (process.env.ATLAS_METADATA !== 'true') {\n      throw new Error('API: The app is not running on the Atlas Platform')\n    }\n  }\n\n  /**\n   * Convert response status codes to API errors and throw them\n   * @param response\n   * @param key\n   */\n  protected throwResponseErrors(response: Response, key: string): void {\n    if (response.status === 404) {\n      throw new APINotFoundError()\n    }\n    if (response.status < 200 || response.status >= 300) {\n      throw new APIError(response, key)\n    }\n  }\n}\n"],"mappings":";;;;;;;;AACA,OAAO,UAAU;;;ACDjB,OAAO,WAAW;;;ACEX,IAAM,WAAN,cAAuB,MAAM;AAAA,EAC3B;AAAA,EAEP,YAAY,UAAoB,KAAa;AAC3C;AAAA,MACE,wBAAwB,SAAS,MAAM,IAAI,SAAS,UAAU,gBAAgB,GAAG;AAAA,IACnF;AACA,SAAK,WAAW;AAAA,EAClB;AACF;AAEO,IAAM,mBAAN,cAA+B,MAAM;AAAC;AAEtC,IAAe,MAAf,MAAmB;AAAA;AAAA;AAAA,EAGL,UAAkB;AAAA,EAErC,cAAc;AACZ,QAAI,QAAQ,IAAI,mBAAmB,QAAQ;AACzC,YAAM,IAAI,MAAM,mDAAmD;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOU,oBAAoB,UAAoB,KAAmB;AACnE,QAAI,SAAS,WAAW,KAAK;AAC3B,YAAM,IAAI,iBAAiB;AAAA,IAC7B;AACA,QAAI,SAAS,SAAS,OAAO,SAAS,UAAU,KAAK;AACnD,YAAM,IAAI,SAAS,UAAU,GAAG;AAAA,IAClC;AAAA,EACF;AACF;;;ADpCO,IAAM,KAAN,cAAiB,IAAI;AAAA,EACT;AAAA,EACA;AAAA,EAEjB,OAAO,cAAuB;AAC5B,UAAM,aAAa,QAAQ,IAAI,sBAAsB,QAAQ;AAC7D,UAAM,eAAe,QAAQ,IAAI,wBAAwB,QAAQ;AACjE,UAAM,eACJ,OAAO,QAAQ,IAAI,cAAc,EAAE,YAAY,MAAM;AACvD,WAAO,aAAa,eAAe;AAAA,EACrC;AAAA,EAEA,cAAc;AACZ,UAAM;AACN,QAAI,QAAQ,IAAI,mBAAmB,QAAQ;AACzC,YAAM,IAAI,MAAM,kDAAkD;AAAA,IACpE;AAEA,SAAK,MAAM,QAAQ,IAAI,sBAAsB;AAC7C,QAAI,KAAK,QAAQ,IAAI;AACnB,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC7D;AAEA,SAAK,QAAQ,QAAQ,IAAI,wBAAwB;AACjD,QAAI,KAAK,UAAU,IAAI;AACrB,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC/D;AAAA,EACF;AAAA,EAEA,MAAM,IAAI,KAA2B;AACnC,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,MACjD,SAAS;AAAA,QACP,eAAe,UAAU,KAAK,KAAK;AAAA,QACnC,cAAc,aAAa,KAAK,OAAO;AAAA,MACzC;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,UAAU,GAAG;AAEtC,WAAO,MAAM,SAAS,KAAK;AAAA,EAC7B;AAAA,EAEA,MAAM,IAAI,KAAa,MAA0B;AAC/C,QAAI,SAAS,MAAM;AACjB;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,MAAM,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,MACjD,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU,IAAI;AAAA,MACzB,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,eAAe,UAAU,KAAK,KAAK;AAAA,QACnC,cAAc,aAAa,KAAK,OAAO;AAAA,MACzC;AAAA,IACF,CAAC;AAED,SAAK,oBAAoB,UAAU,GAAG;AAAA,EACxC;AACF;;;AD7CO,SAAS,gBACd,YACA,aACY;AACZ,MAAI,aAAa,uBAAuB,OAAO;AAC7C,WAAO;AAAA,EACT;AAIA,QAAM,iBAAiB,KAAK,MAAM,UAAQ,QAAQ,MAAM,CAAC;AACzD,QAAM,cAAc,UAClB,KAAK,KAAK,eAAe,KAAK,oBAAoB,CACpD;AAGA,SAAO;AAAA,IACL;AAAA,IACA,YAAY;AAAA;AAAA;AAAA,IAGZ,UAAQ,QAAQ,oCAAoC;AAAA,EACtD;AACF;AAEO,SAAS,gBACd,YACA,aACA,kBACY;AAEZ,MAAI,QAAQ,aAAa,QAAQ,MAAM,IAAI;AACzC,UAAM,IAAI;AAAA,MACR,qBACE,cACA;AAAA,IACJ;AAAA,EACF;AAGA,MACE,QAAQ,aAAa,SAAS,MAAM,KACpC,QAAQ,aAAa,QAAQ,MAAM,IACnC;AACA,UAAM,IAAI;AAAA,MACR,qBACE,cACA;AAAA,IACJ;AAAA,EACF;AAGA,MAAI,QAAQ,aAAa,QAAQ,MAAM,IAAI;AACzC,eAAW,eAAe,WAAW,gBAAgB,CAAC;AACtD,QAAI,WAAW,aAAa,gCAAgC,QAAW;AACrE,cAAQ,KAAK,yDAAyD;AAAA,IACxE;AACA,eAAW,aAAa,8BAA8B;AACtD,QAAI,WAAW,aAAa,uBAAuB,QAAW;AAC5D,cAAQ,KAAK,gDAAgD;AAAA,IAC/D;AACA,eAAW,aAAa,qBAAqB;AAAA,EAC/C,OAAO;AAEL,QAAI,WAAW,iBAAiB,QAAW;AACzC,cAAQ,KAAK,0CAA0C;AAAA,IACzD;AACA,eAAW,eAAe;AAC1B,QAAI,WAAW,uBAAuB,QAAW;AAC/C,cAAQ,KAAK,gDAAgD;AAAA,IAC/D;AACA,eAAW,qBAAqB;AAAA,EAClC;AAEA,qBAAmB;AAEnB,SAAO;AACT;AAEA,SAAS,qBAA2B;AAClC,MAAI,QAAQ,IAAI,gCAAgC,QAAW;AACzD,QAAI,UAAU;AACd,QAAI,QAAQ,IAAI,yBAAyB,UAAa,CAAC,GAAG,YAAY,GAAG;AACvE,gBAAU,UAAU;AAAA,IACtB;AACA,YAAQ,IAAI,OAAO;AAGnB,YAAQ,IAAI,8BAA8B;AAAA,EAC5C;AACF;AAGO,SAAS,QAAQ,IAAY,IAAoB;AAEtD,QAAM,WAAW,GAAG,MAAM,GAAG,EAAE,CAAC;AAChC,QAAM,WAAW,GAAG,MAAM,GAAG,EAAE,CAAC;AAEhC,kBAAgB,QAAQ;AACxB,kBAAgB,QAAQ;AAExB,QAAM,UAAU,SAAS,MAAM,GAAG;AAClC,QAAM,UAAU,QAAQ,CAAC;AACzB,QAAM,UAAU,QAAQ,CAAC;AACzB,QAAM,UAAU,QAAQ,CAAC;AACzB,QAAM,UAAU,SAAS,MAAM,GAAG;AAClC,QAAM,UAAU,QAAQ,CAAC;AACzB,QAAM,UAAU,QAAQ,CAAC;AACzB,QAAM,UAAU,QAAQ,CAAC;AAEzB,QAAM,uBAAuB,UAAU,UAAU,KAAK;AACtD,QAAM,uBAAuB,UAAU,UAAU,IAAI;AACrD,QAAM,uBAAuB,UAAU,UAAU,KAAK;AACtD,QAAM,uBAAuB,UAAU,UAAU,IAAI;AACrD,QAAM,uBAAuB,UAAU,UAAU,KAAK;AAEtD,SAAO,UAAU,UAAU,IAAI;AACjC;AAEO,SAAS,gBAAgB,SAAuB;AACrD,QAAM,sBAAsB,yCAAyC;AACrE,MAAI,QAAQ,WAAW,GAAG;AACxB,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AACA,QAAM,QAAQ,QAAQ,MAAM,GAAG;AAC/B,MAAI,MAAM,SAAS,GAAG;AACpB,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AACA,QAAM,QAAQ,MAAM,CAAC;AACrB,MAAI,MAAM,WAAW,KAAK,MAAM,OAAO,KAAK,CAAC,GAAG;AAC9C,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AACA,QAAM,QAAQ,MAAM,CAAC;AACrB,MAAI,MAAM,WAAW,KAAK,MAAM,OAAO,KAAK,CAAC,GAAG;AAC9C,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AACF;","names":[]}